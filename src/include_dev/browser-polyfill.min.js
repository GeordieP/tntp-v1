/* 
    this file should only ever get loaded in dev mode.
    it will mock the browser storage API that we use to save and
    retrieve data in the extension, allowing us to test functionality with "real enough" data.
*/

let storage = {
    pages: {
        12: {
            name: "first",
            url: "c",
            color: "cyan"
        },
        34: {
            name: "second",
            url: "m",
            color: "magenta"
        },
        56: {
            name: "third",
            url: "y",
            color: "yellow"
        },
        78: {
            name: "fourth",
            url: "k",
            color: "white"
        }
    }
}

// mock the browser storage API
const browser = {
    storage: {
        local: {
            // get: if passed a key, return object containing that key and its associated data.
            // if passed no key, return entire storage object.
            // NOTE: in the real API, this function takes multiple keys and resolves with an object
            // with values of all given keys. We'll just handle one in here for now, because
            // that's all our app currently needs.
            get: key => Promise.resolve(key ? { [key]: storage[key] } : storage),

            // set: update storage object with keys and values from passed object.
            // we don't actually need to do anything here since the the app maintains the same
            // state internally, and the storage object being read from this file won't be
            // persisted between page reloads. Just mock a success or failure case, which
            // is a resolved promise with no args, or rejected promise with an error message.
            set: newObj => Promise.resolve()
            // set: newObj => Promise.reject("err")
        }
    }
}

